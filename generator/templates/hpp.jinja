/**
 * This file contains the declaration of the ObjectDictionnary class.
 * Generated on {{date.strftime("%B %d, %Y")}}
 *
 * NOTICE: Auto-generated from the device's EDS file, do not edit manually!
 */
#pragma once

#define OD_NODE_ID {{ node_id }}
#define OD_GRANULARITY 8
#define OD_PDO_MAPPING_MAX 8
#define OD_ENTRY_SIZE_MAX 1024
#define OD_OBJECTS_COUNT {{ objects | length }}
#define OD_TPDO_COUNT {{ tpdo_count }}
#define OD_RPDO_COUNT {{ rpdo_count }}
#define OBJECT_INDEX_COUNT 0

#define X1A00_MAP_DISABLED 0
#define X1A00_SAM_MPDO 0xFE
#define X1A00_DAM_MPDO 0xFF


/* These defines map an object to its dictionnary array index */
{% set counter = namespace(value=0) %}
{% for object in objects %}
{% for subobject in object.entries %}
#define OD_OBJECT_{{ object.index_hexstr }}_SUB{{ subobject.subindex}} {{ counter.value }}
{% set counter.value = counter.value + 1 %}
{% endfor %}
{% endfor %}

#ifndef _OD_DEFINES_ONLY
#include "IObjectDictionnary.hpp"

using namespace CANopen;

int8_t getLocalData(Data &data, uint32_t id, SDOAbortCodes &abortCode);

int8_t setLocalData(Data data, uint32_t id, SDOAbortCodes &abortCode);

{% for object in objects %}
{% for subobject in object.entries %}
{% if subobject.getter != "getLocalData" %}
int8_t get{{ object.cpp_instance_name }}{{subobject.cpp_instance_name}}(Data &data, uint32_t id, SDOAbortCodes &abortCode);
{% endif %}
{% if subobject.setter != "setLocalData" %}
int8_t set{{ object.cpp_instance_name }}{{subobject.cpp_instance_name}}(Data data, uint32_t id, SDOAbortCodes &abortCode);
{% endif %}
{%endfor%}
{%endfor%}

class ObjectDictionnary : IObjectDictionnary{

private:
    const uint32_t length = {{ subindex_count }};

public:
    // This table is used to find an object by its index.
    std::pair<uint16_t, uint8_t> objectIndexTable[{{ subindex_count }}] = {
        {% for object in objects %}
        {% for subobject in object.entries %}
        std::make_pair(0x{{ object.index_hexstr }}, {{ subobject.subindex }}),
        {% endfor %}
        {% endfor %}
    };

    //TODO: change to func pointer
    // This table contain all the objects getter
    const std::function<uint8_t(Data&, uint32_t, SDOAbortCodes&)> objectGetterTable[{{ subindex_count }}] = {
        {% for object in objects %}
        {% for subobject in object.entries %}
        {% if subobject.getter != "getLocalData" %}
        get{{ object.cpp_instance_name }}{{subobject.cpp_instance_name}},
        {% else %}
        getLocalData,
        {% endif %}
        {% endfor %}
        {% endfor %}
    };

    //TODO: change to func pointer
    // This table contain all the objects setter
    const std::function<uint8_t(Data, uint32_t, SDOAbortCodes&)> objectSetterTable[{{ subindex_count }}] = { 
        {% for object in objects %}
        {% for subobject in object.entries %}
        {% if subobject.setter != "setLocalData" %}
        set{{ object.cpp_instance_name }}{{subobject.cpp_instance_name}},
        {% else %}
        setLocalData,
        {% endif %}
        {% endfor %}
        {% endfor %}
    };

    //DATA
    // bool type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x01 %}
    bool {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // int8_t type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x02 %}
    int8_t {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // int16_t type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x03 %}
    int16_t {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // int32_t type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x04 %}
    int32_t {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // int64_t type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x15 %}
    int64_t {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // uint8_t type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x05 %}
    uint8_t {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // uint16_t type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x06 %}
    uint16_t {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // uint32_t type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x07 %}
    uint32_t {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // uint64_t type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x1B %}
    uint64_t {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // float32 type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x08 %}
    float32 {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // float64 type data table
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x11 %}
    float64 {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}} = {{ subobject.value }};
    {% endif %}
    {% endfor %}
    {% endfor %}

    // This variables contain all the objects visible_string
    {% for object in objects %}
    {% for subobject in object.entries %}
    {% if subobject.type_value == 0x09 %}
    char {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}}[{{subobject.size//8}}] ={ {{ subobject.value | join(', ') }} };
    {% endif %}
    {% endfor %}
    {% endfor %}

    // Data pointer table
    void * dataPtrTable[{{ subindex_count }}] = {
    {% for object in objects %}
    {% for subobject in object.entries %}
    &{{ object.cpp_instance_name }}{{subobject.cpp_instance_name}},
    {% endfor %}
    {% endfor %}
    };
    //END DATA

    {% for object in objects %}
    {% for subobject in object.entries %}
    struct MetaData{
        MetaBitfield metaData = {.value = {{subobject.meta_data}}};
        DataType dataType = {{ subobject.type_name }};
        {{subobject.ctype_name}} value {% if subobject.type_value == 0x09 %}[{{subobject.size//8}}]{% endif %} =  {% if subobject.type_value == 0x09 %}{ {{ subobject.value | join(', ') }} } {% else %} {{subobject.value}} {% endif %};
        {{subobject.ctype_name}} min = {{subobject.value_min}};
        {{subobject.ctype_name}} max = {{subobject.value_max}};
    } {{ object.cpp_instance_name }}{{subobject.cpp_instance_name}}MetaData;
    {% endfor %}
    {% endfor %}



    /**
     * Find an object in the dictionary.
     * @param index The hex index of the object to find.
     * @return index in objectDataTable if found, -1 otherwise.
     */
    int64_t findObject(uint16_t index);
    int64_t findObject(uint16_t index, uint8_t subIndex);

    /**
     * Access an object in the dictionary by array index using the subscript operator.
     * Under the hood, this method uses the at() method.
     * @param index The array index of the object to access.
     * @return index in objectDataTable if found, -1 otherwise.
     */
    int64_t operator[](uint16_t index);

    /**
     * Save data to non-volatile storage for a specified parameter group.
     * This method is called by object 0x1010.
     * @param parameterGroup The parameter group number.
     * @return True if saving was successful, false otherwise.
     */
    bool saveData(uint8_t parameterGroup);

    /**
     * Load data from non-volatile storage for a specified parameter group.
     * This method should be called on application startup to load the object dictionnary.
     * @param parameterGroup The parameter group number.
     * @return True if loading was successful, false otherwise.
     */
    bool loadData(uint8_t parameterGroup);

    /**
     * Restore data to default for a specified parameter group.
     * This method is called by object 0x1011.
     * @param parameterGroup The parameter group number.
     * @return True if restoring was successful, false otherwise.
     */
    bool restoreData(uint8_t parameterGroup);

    /**
     * Test if an object exists in the dictionary.
     * @param index The hex index of the object to find.
     * @param subIndex The subindex of the object to find.
     * @return True if the object exists, false otherwise.
    */
    bool isSubValid(uint16_t index, uint8_t subIndex);

    /**
     * Get the value of an object in the dictionary.
     * @param data The data object to store the value in.
     * @param index The hex index of the object to find.
     * @param subIndex The subindex of the object to find.
     * @param abortCode The abort code to set if the object is not found.
     * @return 0 if the object was found, 1 if a request is pending, -1 otherwise.
    */
    int8_t readData(Data &data, uint16_t index, uint8_t subIndex,
                    SDOAbortCodes &abortCode);

    int8_t readData(Data &data, uint64_t id, SDOAbortCodes &abortCode);

    /**
     * Set the value of an object in the dictionary.
     * @param data The data object to store the value in.
     * @param index The hex index of the object to find.
     * @param subIndex The subindex of the object to find.
     * @param abortCode The abort code to set if the object is not found.
     * @return 0 if the object was found, 1 if a request is pending, -1
     * otherwise.
     */
    int8_t writeData(Data data, uint16_t index, uint8_t subIndex,
                     SDOAbortCodes &abortCode);

    int8_t writeData(Data data, uint64_t id, SDOAbortCodes &abortCode);

    /**
     * Get the metadata of an object in the dictionary.
     * @param index The index to the object
     * @param subIndex The subindex to the object
     * @return The metadata of the object.
     */
    MetaBitfield getMetadata(uint16_t index, uint8_t subIndex);
};
#endif // _OD_DEFINES_ONLY