/**
 * This file contains the declaration of the ObjectDictionnary class.
 *
 * NOTICE: Auto-generated from the device's yaml file, do not edit manually!
 */
#pragma once

#include "od_common.hpp"
#include "iobject-dictionnary.hpp"

#define OD_NODE_ID {{ node_id }}

#define OD_OBJECTS_COUNT {{ objects | length }}
#define OD_TPDO_COUNT {{ nrOfTXPDO }}
#define OD_RPDO_COUNT {{ nrOfRXPDO }}
#define OD_LENGTH {{ subindex_count }}

/* These defines map an object to its dictionnary array index */
{% set counter = namespace(value=0) %}
{% for object in objects %}
{% for subobject in object.get_subobjects %}
#define OD_OBJECT_{{ object.index_hex }}_SUB{{ subobject.subindex}} {{ counter.value }}
{% set counter.value = counter.value + 1 %}
{% endfor %}
{% endfor %}

extern const uint64_t od_signature;

namespace CANopenOD {
// INDEX
// This table is used to find an object by its index.
constexpr std::pair<uint16_t, uint8_t> objectIndexTable[OD_LENGTH] = {
    {% set counter = namespace(value=0) %}
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    /* {{ "%04d"|format(counter.value) }} */ std::make_pair(0x{{ object.index_hex }}, {{ subobject.subindex }}),
    {% set counter.value = counter.value + 1 %}
    {% endfor %}
    {% endfor %}
};

}

class ObjectDictionnary : IObjectDictionnary{

public:
    const uint32_t length = OD_LENGTH;
    static const Metadata *objectMetadataTable[OD_LENGTH];
    static int8_t (*objectGetterTable[OD_LENGTH])(Data &data, int32_t id, SDOAbortCodes &abortCode);
    static int8_t (*objectSetterTable[OD_LENGTH])(const Data &data, int32_t id, SDOAbortCodes &abortCode);
    static uint8_t dataIndexTable[OD_LENGTH];

    {% set datatypes = [
        {'type': 'bool', 'code': '0x01', 'ctype': 'bool'},
        {'type': 'i8', 'code': '0x02', 'ctype': 'int8_t'},
        {'type': 'i16', 'code': '0x03', 'ctype': 'int16_t'},
        {'type': 'i32', 'code': '0x04', 'ctype': 'int32_t'},
        {'type': 'i64', 'code': '0x15', 'ctype': 'int64_t'},
        {'type': 'u8', 'code': '0x05', 'ctype': 'uint8_t'},
        {'type': 'u16', 'code': '0x06', 'ctype': 'uint16_t'},
        {'type': 'u32', 'code': '0x07', 'ctype': 'uint32_t'},
        {'type': 'u64', 'code': '0x1B', 'ctype': 'uint64_t'},
        {'type': 'f32', 'code': '0x08', 'ctype': 'float'},
        {'type': 'f64', 'code': '0x11', 'ctype': 'double'},
    ] %}
    // Default values initialisation tables
    {% for item in datatypes %}
    static {{ item.ctype }} {{ item.type }}Table[{{ type_count[item.type] }}];
    {% endfor %}

    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == "0x09" %}
    static char {{subobject.cpp_instance_name}}[{{subobject.length}}];
    {% endif %}
    {% endfor %}
    {% endfor %}
    static char *stringTable[{{ type_count.str }}];

    /**
     * Find an object in the dictionary.
     * @param index The hex index of the object to find.
     * @return index in objectDataTable if found, -1 otherwise.
     */
    int32_t findObject(uint16_t index, uint8_t subIndex = 0);

    /**
     * Access an object in the dictionary by array index using the subscript operator.
     * Under the hood, this method uses the at() method.
     * @param index The array index of the object to access.
     * @return index in objectDataTable if found, -1 otherwise.
     */
    int32_t operator[](uint16_t index);

    /**
     * Save data to non-volatile storage for a specified parameter group.
     * This method is called by object 0x1010.
     * @param parameterGroup The parameter group number.
     * @return True if saving was successful, false otherwise.
     */
    bool saveData(uint8_t parameterGroup);

    /**
    * Setter called by the od to save data
    * @param data must contain "save"
    * @param id object id for parameter group
    * @param abortCode to set if the object is not found.
    */
    int8_t saveData(const Data &data, int32_t id, SDOAbortCodes &abortCode);

    /**
     * Getter called by the od to send information about the save
     * @param data to fill with the save status
     * @param id object id for parameter group
     * @param abortCode to set if the object is not found.
    */
    int8_t getSave(Data &data, int32_t id, SDOAbortCodes &abortCode);

    /**
     * Load data from non-volatile storage for a specified parameter group.
     * This method should be called on application startup to load the object dictionnary.
     * @param parameterGroup The parameter group number.
     * @return True if loading was successful, false otherwise.
     */
    bool loadData(uint8_t parameterGroup);

    /**
     * Restore data to default for a specified parameter group.
     * This method is called by object 0x1011.
     * @param parameterGroup The parameter group number.
     * @return True if restoring was successful, false otherwise.
     */
    bool restoreData(uint8_t parameterGroup);

    /**
    * Setter called by the od to restore data
    * @param data must contain "load"
    * @param id object id for parameter group
    * @param abortCode to set if the object is not found.
    */
    int8_t restoreData(const Data &data, int32_t id, SDOAbortCodes &abortCode);

    /**
     * Getter called by the od to send information about the restore
     * @param data to fill with the save status
     * @param id object id for parameter group
     * @param abortCode to set if the object is not found.
    */
    int8_t getRestore(Data &data, int32_t id, SDOAbortCodes &abortCode);

    /**
     * Test if an object exists in the dictionary.
     * @param index The hex index of the object to find.
     * @param subIndex The subindex of the object to find.
     * @return True if the object exists, false otherwise.
    */
    bool isSubValid(uint16_t index, uint8_t subIndex);

    /**
     * Get the value of an object in the dictionary.
     * @param data The data object to store the value in.
     * @param index The hex index of the object to find.
     * @param subIndex The subindex of the object to find.
     * @param abortCode The abort code to set if the object is not found.
     * @return 0 if the object was found, 1 if a request is pending, -1 otherwise.
    */
    int8_t readData(Data &data, uint16_t index, uint8_t subIndex,
                    SDOAbortCodes &abortCode);
    int8_t readData(Data &data, int32_t id, SDOAbortCodes &abortCode);
    int8_t readData(Data &data, uint16_t index, uint8_t subIndex);
    int8_t readData(Data &data, int32_t id);

    /**
     * Set the value of an object in the dictionary.
     * @param data The data object to store the value in.
     * @param index The hex index of the object to find.
     * @param subIndex The subindex of the object to find.
     * @param abortCode The abort code to set if the object is not found.
     * @return 0 if the object was found, 1 if a request is pending, -1
     * otherwise.
     */
    int8_t writeData(const Data &data, uint16_t index, uint8_t subIndex,
                     SDOAbortCodes &abortCode);
    int8_t writeData(const Data &data, int32_t id, SDOAbortCodes &abortCode);
    int8_t writeData(const Data &data, uint16_t index, uint8_t subIndex);
    int8_t writeData(const Data &data, int32_t id);

    /**
     * Get the metadata of an object in the dictionary.
     * @param index The index to the object
     * @param subIndex The subindex to the object
     * @return The metadata of the object.
     */
    Metadata* getMetadata(uint16_t index, uint8_t subindex);
    Metadata* getMetadata(int32_t id);
    uint16_t getSize(uint16_t index, uint8_t subindex);
    uint16_t getSize(int32_t id);
};
