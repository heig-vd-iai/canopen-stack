/**
 * Contains the declarations of the ObjectDictionnary class.
 * This is an auto-generated file, do not edit it directly.
 */
#include "od.hpp"
#include "node.hpp"

using namespace CANopen;

const uint64_t od_signature = {{ signature }}u;

/**
 * Metadata declaration for each object.
 */
{% for object in objects %}
{% for subobject in object.get_subobjects %}
static Metadata_{{subobject.ctype_name}}{% if (subobject.low_limit != "none" ) and (subobject.high_limit != "none" ) %}_limited{% endif %} {{subobject.cpp_instance_name}}Metadata{{"{"}}{{ subobject.meta_data }}{% if subobject.type == "string" %}, "{{subobject.default}}"{% elif subobject.type != "domain" %}, {{subobject.default}}{% endif %}{% if (subobject.low_limit != "none" ) and (subobject.high_limit != "none" ) %}, {{subobject.low_limit}}, {{subobject.high_limit}}{% endif %}{% if subobject.type == "string" %}, {{subobject.length}}{% endif %}};
{% endfor %}
{% endfor %}

const Metadata *ObjectDictionnary::objectMetadataTable[{{ subindex_count }}] = {
{% set counter = namespace(value=0) %}
{% for object in objects %}
{% for subobject in object.get_subobjects %}
    /* {{ "%04d"|format(counter.value) }} */  &{{subobject.cpp_instance_name}}Metadata,
{% set counter.value = counter.value + 1 %}
{% endfor %}
{% endfor %}
};

/**
 * Getters/Setters for local data.
 */
{% for object in objects %}
{% for subobject in object.get_subobjects %}
{% if subobject.get != "none" and not subobject.remote %}
static int8_t get{{subobject.cpp_instance_name}}(Data &data, int32_t id, SDOAbortCodes &abortCode){
    return {{ subobject.get }}(data, id, abortCode);
}
{%endif%}
{% if ((subobject.low_limit != "none" and high_limit != "none") or (subobject.data.access in ['wo', 'rw'] and subobject.set != "none") and not subobject.remote) %}
static int8_t set{{subobject.cpp_instance_name}}(const Data &data, int32_t id, SDOAbortCodes &abortCode){
    {% if subobject.low_limit != "none" and subobject.high_limit != "none" %}
    abortCode = data.{{subobject.type_code}} < {{ subobject.low_limit }} ? SDOAbortCode_DownloadValueTooLow : data.{{subobject.type_code}} > {{ subobject.high_limit }} ? SDOAbortCode_DownloadValueTooHigh : SDOAbortCode_OK;
    if (abortCode != SDOAbortCode_OK) return -1;
    {% endif %}
    {% if subobject.set != "none" and not subobject.remote %}
    return {{ subobject.set }}(data, id, abortCode);
    {% elif subobject.remote %}
    return setRemoteData(data, id, abortCode);
    {% else %}
    return setLocalData_{{subobject.ctype_name}}(data, id, abortCode);
    {% endif %}
}
{%endif%}
{%endfor%}
{%endfor%}

int8_t (*ObjectDictionnary::objectGetterTable[{{ subindex_count }}])(Data &data, int32_t id, SDOAbortCodes &abortCode) = {
    {% set counter = namespace(value=0) %}
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    /* {{ "%04d"|format(counter.value) }} - 0x{{ "%04x"|format(object.index) }} */
    {%- if (subobject.data.access in ['ro', 'rw'] and subobject.data.data.attribute or subobject.get) != "none" and not object.remote %}
    &get{{subobject.cpp_instance_name}},
    {% elif object.remote and (subobject.data.data.attribute or subobject.get) != "none" %}
    &getRemoteData,
    {% else %}
    &getLocalData_{{subobject.ctype_name}},
    {% endif %}
    {%- set counter.value = counter.value + 1 -%}
    {% endfor %}
    {% endfor %}
};

// This table contain all the objects setter
int8_t (*ObjectDictionnary::objectSetterTable[{{ subindex_count }}])(const Data &data, int32_t id, SDOAbortCodes &abortCode) = {
    {% set counter = namespace(value=0) %}
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if (subobject.data.access in ['wo', 'rw'] and (subobject.data.data.attribute or subobject.set != "none") and not object.remote) or (subobject.low_limit != "none" and subobject.high_limit != "none") %}
    /* {{ "%04d"|format(counter.value) }} */ &set{{subobject.cpp_instance_name}},
    {% elif object.remote and (subobject.data.data.attribute or subobject.set != "none") %}
    /* {{ "%04d"|format(counter.value) }} */ &setRemoteData,
    {% else %}
    /* {{ "%04d"|format(counter.value) }} */ &setLocalData_{{subobject.ctype_name}},
    {% endif %}
    {%- set counter.value = counter.value + 1 -%}
    {% endfor %}
    {% endfor %}
};
// END GETTER/SETTER

{% set datatypes = [
    {'type': 'bool', 'code': '0x01', 'ctype': 'bool'},
    {'type': 'i8', 'code': '0x02', 'ctype': 'int8_t'},
    {'type': 'i16', 'code': '0x03', 'ctype': 'int16_t'},
    {'type': 'i32', 'code': '0x04', 'ctype': 'int32_t'},
    {'type': 'i64', 'code': '0x15', 'ctype': 'int64_t'},
    {'type': 'u8', 'code': '0x05', 'ctype': 'uint8_t'},
    {'type': 'u16', 'code': '0x06', 'ctype': 'uint16_t'},
    {'type': 'u32', 'code': '0x07', 'ctype': 'uint32_t'},
    {'type': 'u64', 'code': '0x1B', 'ctype': 'uint64_t'},
    {'type': 'f32', 'code': '0x08', 'ctype': 'float'},
    {'type': 'f64', 'code': '0x11', 'ctype': 'double'},
] %}

{% for item in datatypes %}
// Default values for {{ item.type }}
{{ item.ctype }} ObjectDictionnary::{{ item.type }}Table[{{ type_count[item.type] }}] = {
    {% set counter = namespace(value=0) %}
    {% set counter_id = namespace(value=0) %}
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == item.code %}
    /* {{ "%04d"|format(counter_id.value) }} - {{ "%03d"|format(counter.value) }} */ {{ subobject.default }},
    {% set counter_id.value = counter_id.value + 1 %}
    {% endif %}
    {%- set counter.value = counter.value + 1 -%}
    {% endfor %}
    {% endfor %}
};
{% endfor %}

// string type data variable
{% for object in objects %}
{% for subobject in object.get_subobjects %}
{% if subobject.type_value == "0x09" %}
char ObjectDictionnary::{{subobject.cpp_instance_name}}[{{subobject.length}}] ={ {{ subobject.default }} };
{% endif %}
{% endfor %}
{% endfor %}

// string type data table
char *ObjectDictionnary::stringTable[{{ type_count.str }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == "0x09" %}
    {{subobject.cpp_instance_name}},
    {% endif %}
    {% endfor %}
    {% endfor %}
};

// index data table
{% set counterBool = namespace(value=0) %}
{% set counterI8 = namespace(value=0) %}
{% set counterI16 = namespace(value=0) %}
{% set counterI32 = namespace(value=0) %}
{% set counterI64 = namespace(value=0) %}
{% set counterU8 = namespace(value=0) %}
{% set counterU16 = namespace(value=0) %}
{% set counterU32 = namespace(value=0) %}
{% set counterU64 = namespace(value=0) %}
{% set counterF32 = namespace(value=0) %}
{% set counterF64 = namespace(value=0) %}
{% set counterString = namespace(value=0) %}

uint8_t ObjectDictionnary::dataIndexTable[{{ subindex_count }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == "0x01" %}
    {{ counterBool.value }},
    {% set counterBool.value = counterBool.value + 1 %}
    {% elif subobject.type_value == "0x02" %}
    {{ counterI8.value }},
    {% set counterI8.value = counterI8.value + 1 %}
    {% elif subobject.type_value == "0x03" %}
    {{ counterI16.value }},
    {% set counterI16.value = counterI16.value + 1 %}
    {% elif subobject.type_value == "0x04" %}
    {{ counterI32.value }},
    {% set counterI32.value = counterI32.value + 1 %}
    {% elif subobject.type_value == "0x15" %}
    {{ counterI64.value }},
    {% set counterI64.value = counterI64.value + 1 %}
    {% elif subobject.type_value == "0x05" %}
    {{ counterU8.value }},
    {% set counterU8.value = counterU8.value + 1 %}
    {% elif subobject.type_value == "0x06" %}
    {{ counterU16.value }},
    {% set counterU16.value = counterU16.value + 1 %}
    {% elif subobject.type_value == "0x07" %}
    {{ counterU32.value }},
    {% set counterU32.value = counterU32.value + 1 %}
    {% elif subobject.type_value == "0x16" %}
    {{ counterU64.value }},
    {% set counterU64.value = counterU64.value + 1 %}
    {% elif subobject.type_value == "0x08" %}
    {{ counterF32.value }},
    {% set counterF32.value = counterF32.value + 1 %}
    {% elif subobject.type_value == "0x09" %}
    {{ counterF64.value }},
    {% set counterF64.value = counterF64.value + 1 %}
    {% elif subobject.type_value == "0x0A" %}
    {{ counterString.value }},
    {% set counterString.value = counterString.value + 1 %}
    {% endif %}
    {% endfor %}
    {% endfor %}
};
//END DATA
