/**
 * This file contains the declaration of the ObjectDictionnary class.
 * Generated on {{date}}
 *
 * NOTICE: Auto-generated from the device's yaml file, do not edit manually!
 */
#pragma once

#define OD_NODE_ID {{ node_id }}
#define OD_GRANULARITY 8
#define OD_PDO_MAPPING_MAX 8
#define OD_ENTRY_SIZE_MAX 1024
#define OD_OBJECTS_COUNT {{ objects | length }}
#define OD_TPDO_COUNT {{ nrOfTXPDO }}
#define OD_RPDO_COUNT {{ nrOfRXPDO }}
#define OBJECT_INDEX_COUNT 0

#define X1A00_MAP_DISABLED 0
#define X1A00_SAM_MPDO 0xFE
#define X1A00_DAM_MPDO 0xFF

#define SAVE_INDEX 0x1010
#define SAVE_SIGNATURE 0x65766173
#define RESTORE_INDEX 0x1011
#define RESTORE_SIGNATURE 0x64616F6C

#define MAX_SUB_INDEX 255

#define MAX_WRITE_TRY 100

#define DOMAIN_MAX_SIZE 800


/* These defines map an object to its dictionnary array index */
{% set counter = namespace(value=0) %}
{% for object in objects %}
{% for subobject in object.get_subobjects %}
#define OD_OBJECT_{{ object.index_hex }}_SUB{{ subobject.subindex}} {{ counter.value }}
{% set counter.value = counter.value + 1 %}
{% endfor %}
{% endfor %}

#ifndef _OD_DEFINES_ONLY
#include "IObjectDictionnary.hpp"

using namespace CANopen;

int8_t getLocalData_bool(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_bool(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_int8_t(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_int8_t(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_int16_t(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_int16_t(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_int32_t(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_int32_t(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_int64_t(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_int64_t(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_uint8_t(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_uint8_t(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_uint16_t(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_uint16_t(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_uint32_t(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_uint32_t(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_uint64_t(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_uint64_t(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_float(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_float(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_double(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_double(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_char(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_char(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getLocalData_domain(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setLocalData_domain(const Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t getRemoteData(Data &data, int32_t id, SDOAbortCodes &abortCode);
int8_t setRemoteData(const Data &data, int32_t id, SDOAbortCodes &abortCode);
{% for object in objects %}
{% for subobject in object.get_subobjects %}
{% if subobject.access != "wo" and subobject.get != "none" and not object.remote %}
int8_t get{{subobject.cpp_instance_name}}(Data &data, int32_t id, SDOAbortCodes &abortCode);
{% endif %}
{% if subobject.set != "ro" and ((subobject.low_limit != "none" and subobject.high_limit != "none") or subobject.set != "none" and not object.remote)  %}
int8_t set{{subobject.cpp_instance_name}}(const Data &data, int32_t id, SDOAbortCodes &abortCode);
{% endif %}
{%endfor%}
{%endfor%}


class ObjectDictionnary : IObjectDictionnary{

private:
    //METADATA
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    Metadata_{{subobject.ctype_name}}{% if (subobject.low_limit != "none" ) and (subobject.high_limit != "none" ) %}_limited{% endif %} {{subobject.cpp_instance_name}}Metadata{{"{"}}{{ subobject.meta_data }}{% if subobject.type == "string" %}, "{{subobject.default}}"{% elif subobject.type != "domain" %}, {{subobject.default}}{% endif %}{% if (subobject.low_limit != "none" ) and (subobject.high_limit != "none" ) %}, {{subobject.low_limit}}, {{subobject.high_limit}}{% endif %}{% if subobject.type == "string" %}, {{subobject.length}}{% endif %}};
    {% endfor %}
    {% endfor %}
    //END METADATA

public:
    const uint32_t length = {{ subindex_count }};
    // INDEX
    // This table is used to find an object by its index.
    const std::pair<uint16_t, uint8_t> objectIndexTable[{{ subindex_count }}] = {
        {% for object in objects %}
        {% for subobject in object.get_subobjects %}
        std::make_pair(0x{{ object.index_hex }}, {{ subobject.subindex }}),
        {% endfor %}
        {% endfor %}
    };

    const Metadata *objectMetadataTable[{{ subindex_count }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    &{{subobject.cpp_instance_name}}Metadata,
    {% endfor %}
    {% endfor %}
    };
    // END INDEX

    // GETTER/SETTER
    // This table contain all the objects getter
    int8_t (*objectGetterTable[{{ subindex_count }}])(Data &data, int32_t id, SDOAbortCodes &abortCode) = {
        {% for object in objects %}
        {% for subobject in object.get_subobjects %}
        {% if subobject.access != "wo" and subobject.get != "none" and not object.remote%}
        &get{{subobject.cpp_instance_name}},
        {% elif object.remote and subobject.get != "none" %}
        &getRemoteData,
        {% else %}
        &getLocalData_{{subobject.ctype_name}},
        {% endif %}
        {% endfor %}
        {% endfor %}
    };

    // This table contain all the objects setter
    int8_t (*objectSetterTable[{{ subindex_count }}])(const Data &data, int32_t id, SDOAbortCodes &abortCode) = { 
        {% for object in objects %}
        {% for subobject in object.get_subobjects %}
        {% if subobject.access != "ro" and (subobject.set != "none" and not object.remote) or (subobject.low_limit != "none" and subobject.high_limit != "none") %}
        &set{{subobject.cpp_instance_name}},
        {% elif object.remote and subobject.set != "none" %}
        &setRemoteData,
        {% else %}
        &setLocalData_{{subobject.ctype_name}},
        {% endif %}
        {% endfor %}
        {% endfor %}
    };
    // END GETTER/SETTER

    //DATA
    // bool type data table
    bool boolTable[{{ type_count.bool }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x01 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // int8_t type data table
    int8_t i8Table[{{ type_count.i8 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x02 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // int16_t type data table
    int16_t i16Table[{{ type_count.i16 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x03 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // int32_t type data table
    int32_t i32Table[{{ type_count.i32 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x04 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // int64_t type data table
    int64_t i64Table[{{ type_count.i64 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x15 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // uint8_t type data table
    uint8_t u8Table[{{ type_count.u8 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x05 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // uint16_t type data table
    uint16_t u16Table[{{ type_count.u16 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x06 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // uint32_t type data table
    uint32_t u32Table[{{ type_count.u32 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x07 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // uint64_t type data table
    uint64_t u64Table[{{ type_count.u64 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x1B %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // float type data table
    float f32Table[{{ type_count.f32 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x08 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // float64 type data table
    double f64Table[{{ type_count.f64 }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x11 %}
    {{ subobject.default }},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // string type data variable
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x09 %}
    char {{subobject.cpp_instance_name}}[{{subobject.length}}] ={ {{ subobject.default }} };
    {% endif %}
    {% endfor %}
    {% endfor %}

    // string type data table
    char *stringTable[{{ type_count.str }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == 0x09 %}
    {{subobject.cpp_instance_name}},
    {% endif %}
    {% endfor %}
    {% endfor %}
    };

    // index data table
    {% set counterBool = namespace(value=0) %}
    {% set counterI8 = namespace(value=0) %}
    {% set counterI16 = namespace(value=0) %}
    {% set counterI32 = namespace(value=0) %}
    {% set counterI64 = namespace(value=0) %}
    {% set counterU8 = namespace(value=0) %}
    {% set counterU16 = namespace(value=0) %}
    {% set counterU32 = namespace(value=0) %}
    {% set counterU64 = namespace(value=0) %}
    {% set counterF32 = namespace(value=0) %}
    {% set counterF64 = namespace(value=0) %}
    {% set counterString = namespace(value=0) %}

    uint8_t dataIndexTable[{{ subindex_count }}] = {
    {% for object in objects %}
    {% for subobject in object.get_subobjects %}
    {% if subobject.type_value == "0x01" %}
    {{ counterBool.value }},
    {% set counterBool.value = counterBool.value + 1 %}
    {% elif subobject.type_value == "0x02" %}
    {{ counterI8.value }},
    {% set counterI8.value = counterI8.value + 1 %}
    {% elif subobject.type_value == "0x03" %}
    {{ counterI16.value }},
    {% set counterI16.value = counterI16.value + 1 %}
    {% elif subobject.type_value == "0x04" %}
    {{ counterI32.value }},
    {% set counterI32.value = counterI32.value + 1 %}
    {% elif subobject.type_value == "0x15" %}
    {{ counterI64.value }},
    {% set counterI64.value = counterI64.value + 1 %}
    {% elif subobject.type_value == "0x05" %}
    {{ counterU8.value }},
    {% set counterU8.value = counterU8.value + 1 %}
    {% elif subobject.type_value == "0x06" %}
    {{ counterU16.value }},
    {% set counterU16.value = counterU16.value + 1 %}
    {% elif subobject.type_value == "0x07" %}
    {{ counterU32.value }},
    {% set counterU32.value = counterU32.value + 1 %}
    {% elif subobject.type_value == "0x16" %}
    {{ counterU64.value }},
    {% set counterU64.value = counterU64.value + 1 %}
    {% elif subobject.type_value == "0x08" %}
    {{ counterF32.value }},
    {% set counterF32.value = counterF32.value + 1 %}
    {% elif subobject.type_value == "0x09" %}
    {{ counterF64.value }},
    {% set counterF64.value = counterF64.value + 1 %}
    {% elif subobject.type_value == "0x0A" %}
    {{ counterString.value }},
    {% set counterString.value = counterString.value + 1 %}
    {% endif %}
    {% endfor %}
    {% endfor %}
    };
    //END DATA

    /**
     * Find an object in the dictionary.
     * @param index The hex index of the object to find.
     * @return index in objectDataTable if found, -1 otherwise.
     */
    int32_t findObject(uint16_t index);
    int32_t findObject(uint16_t index, uint8_t subIndex);

    /**
     * Access an object in the dictionary by array index using the subscript operator.
     * Under the hood, this method uses the at() method.
     * @param index The array index of the object to access.
     * @return index in objectDataTable if found, -1 otherwise.
     */
    int32_t operator[](uint16_t index);

    /**
     * Save data to non-volatile storage for a specified parameter group.
     * This method is called by object 0x1010.
     * @param parameterGroup The parameter group number.
     * @return True if saving was successful, false otherwise.
     */
    bool saveData(uint8_t parameterGroup);

    /**
    * Setter called by the od to save data
    * @param data must contain "save" 
    * @param id object id for parameter group
    * @param abortCode to set if the object is not found.
    */
    int8_t saveData(const Data &data, int32_t id, SDOAbortCodes &abortCode);

    /**
     * Getter called by the od to send information about the save
     * @param data to fill with the save status
     * @param id object id for parameter group
     * @param abortCode to set if the object is not found. 
    */
    int8_t getSave(Data &data, int32_t id, SDOAbortCodes &abortCode);

    /**
     * Load data from non-volatile storage for a specified parameter group.
     * This method should be called on application startup to load the object dictionnary.
     * @param parameterGroup The parameter group number.
     * @return True if loading was successful, false otherwise.
     */
    bool loadData(uint8_t parameterGroup);

    /**
     * Restore data to default for a specified parameter group.
     * This method is called by object 0x1011.
     * @param parameterGroup The parameter group number.
     * @return True if restoring was successful, false otherwise.
     */
    bool restoreData(uint8_t parameterGroup);

    /**
    * Setter called by the od to restore data
    * @param data must contain "load"
    * @param id object id for parameter group
    * @param abortCode to set if the object is not found.
    */
    int8_t restoreData(const Data &data, int32_t id, SDOAbortCodes &abortCode);

    /**
     * Getter called by the od to send information about the restore
     * @param data to fill with the save status
     * @param id object id for parameter group
     * @param abortCode to set if the object is not found.
    */
    int8_t getRestore(Data &data, int32_t id, SDOAbortCodes &abortCode);

    /**
     * Test if an object exists in the dictionary.
     * @param index The hex index of the object to find.
     * @param subIndex The subindex of the object to find.
     * @return True if the object exists, false otherwise.
    */
    bool isSubValid(uint16_t index, uint8_t subIndex);

    /**
     * Get the value of an object in the dictionary.
     * @param data The data object to store the value in.
     * @param index The hex index of the object to find.
     * @param subIndex The subindex of the object to find.
     * @param abortCode The abort code to set if the object is not found.
     * @return 0 if the object was found, 1 if a request is pending, -1 otherwise.
    */
    int8_t readData(Data &data, uint16_t index, uint8_t subIndex,
                    SDOAbortCodes &abortCode);

    int8_t readData(Data &data, int32_t id, SDOAbortCodes &abortCode);

    int8_t readData(Data &data, uint16_t index, uint8_t subIndex);

    int8_t readData(Data &data, int32_t id);

    /**
     * Set the value of an object in the dictionary.
     * @param data The data object to store the value in.
     * @param index The hex index of the object to find.
     * @param subIndex The subindex of the object to find.
     * @param abortCode The abort code to set if the object is not found.
     * @return 0 if the object was found, 1 if a request is pending, -1
     * otherwise.
     */
    int8_t writeData(const Data &data, uint16_t index, uint8_t subIndex,
                     SDOAbortCodes &abortCode);

    int8_t writeData(const Data &data, int32_t id, SDOAbortCodes &abortCode);

    int8_t writeData(const Data &data, uint16_t index, uint8_t subIndex);

    int8_t writeData(const Data &data, int32_t id);

    /**
     * Get the metadata of an object in the dictionary.
     * @param index The index to the object
     * @param subIndex The subindex to the object
     * @return The metadata of the object.
     */
    Metadata* getMetadata(uint16_t index, uint8_t subindex);

    Metadata* getMetadata(int32_t id);

    Data* getData(uint16_t index, uint8_t subindex);

    Data* getData(int32_t id);

    void setData(const Data &data, uint16_t index, uint8_t subindex);

    void setData(const Data &data, int32_t id);

    uint16_t getSize(uint16_t index, uint8_t subindex);

    uint16_t getSize(int32_t id);
};
#endif // _OD_DEFINES_ONLY