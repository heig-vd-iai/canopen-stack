/**
 * Contains the declarations of the ObjectDictionnary class.
 */
#include "od.hpp"
#include "node.hpp"
#include "driverlib_cm.h"
extern "C" {
#include "cm.h"
}

#include <cstring>


using namespace CANopen;

{% for object in objects %}
{% for subobject in object.get_subobjects %}
{% if subobject.access != "wo" and subobject.get != "none" and not subobject.remote %}
int8_t get{{subobject.cpp_instance_name}}(Data &data, int32_t id, SDOAbortCodes &abortCode){
    return {{ subobject.get }}(data, id, abortCode);
}
{%endif%}
{% if subobject.access != "ro" and ((subobject.low_limit != "none" and high_limit != "none") or subobject.set != "none") %}
int8_t set{{subobject.cpp_instance_name}}(const Data &data, int32_t id, SDOAbortCodes &abortCode){
    {% if subobject.low_limit != "none" and subobject.high_limit != "none" %}
    abortCode = data.{{subobject.type_code}} < {{ subobject.low_limit }} ? SDOAbortCode_DownloadValueTooLow : data.{{subobject.type_code}} > {{ subobject.high_limit }} ? SDOAbortCode_DownloadValueTooHigh : SDOAbortCode_OK;
    if (abortCode != SDOAbortCode_OK) return -1;
    {% endif %}
    {% if subobject.set != "none" and not subobject.remote %}
    return {{ subobject.set }}(data, id, abortCode);
    {% elif subobject.remote %}
    return setRemoteData(data, id, abortCode);
    {% else %}
    return setLocalData_{{subobject.ctype_name}}(data, id, abortCode);
    {% endif %}
}
{%endif%}
{%endfor%}
{%endfor%}

int8_t getLocalData_bool(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    data.b = node.od().boolTable[node.od().dataIndexTable[id]];
    return 0;
}

int8_t setLocalData_bool(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    node.od().boolTable[node.od().dataIndexTable[id]] = data.b;
    return 0;
}

int8_t getLocalData_int8_t(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    data.i8 = node.od().i8Table[node.od().dataIndexTable[id]];
    return 0;
}

int8_t setLocalData_int8_t(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    node.od().i8Table[node.od().dataIndexTable[id]] = data.i8;
    return 0;
}

int8_t getLocalData_int16_t(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    data.i16 = node.od().i16Table[node.od().dataIndexTable[id]];
    return 0;
}

int8_t setLocalData_int16_t(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    node.od().i16Table[node.od().dataIndexTable[id]] = data.i16;
    return 0;
}

int8_t getLocalData_int32_t(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    data.i32 = node.od().i32Table[node.od().dataIndexTable[id]];
    return 0;
}

int8_t setLocalData_int32_t(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    node.od().i32Table[node.od().dataIndexTable[id]] = data.i32;
    return 0;
}

int8_t getLocalData_int64_t(Data &data, int32_t id, SDOAbortCodes &abortCode) {
   abortCode = SDOAbortCode_OK;
   data.i64 = node.od().i64Table[node.od().dataIndexTable[id]];
   return 0;
}

int8_t setLocalData_int64_t(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
   abortCode = SDOAbortCode_OK;
   node.od().i64Table[node.od().dataIndexTable[id]] = data.i64;
   return 0;
}

int8_t getLocalData_uint8_t(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    data.u8 = node.od().u8Table[node.od().dataIndexTable[id]];
    return 0;
}

int8_t setLocalData_uint8_t(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    node.od().u8Table[node.od().dataIndexTable[id]] = data.u8;
    return 0;
}

int8_t getLocalData_uint16_t(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    data.u16 = node.od().u16Table[node.od().dataIndexTable[id]];
    return 0;
}

int8_t setLocalData_uint16_t(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    node.od().u16Table[node.od().dataIndexTable[id]] = data.u16;
    return 0;
}

int8_t getLocalData_uint32_t(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    data.u32 = node.od().u32Table[node.od().dataIndexTable[id]];
    return 0;
}

int8_t setLocalData_uint32_t(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    node.od().u32Table[node.od().dataIndexTable[id]] = data.u32;
    return 0;
}

int8_t getLocalData_uint64_t(Data &data, int32_t id, SDOAbortCodes &abortCode) {
   abortCode = SDOAbortCode_OK;
   data.u64 = node.od().u64Table[node.od().dataIndexTable[id]];
   return 0;
}

int8_t setLocalData_uint64_t(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
   abortCode = SDOAbortCode_OK;
   node.od().u64Table[node.od().dataIndexTable[id]] = data.u64;
   return 0;
}

int8_t getLocalData_float(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    data.f32 = node.od().f32Table[node.od().dataIndexTable[id]];
    return 0;
}

int8_t setLocalData_float(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    abortCode = SDOAbortCode_OK;
    node.od().f32Table[node.od().dataIndexTable[id]] = data.f32;
    return 0;
}

int8_t getLocalData_double(Data &data, int32_t id, SDOAbortCodes &abortCode) {
   abortCode = SDOAbortCode_OK;
   data.f64 = node.od().f64Table[node.od().dataIndexTable[id]];
   return 0;
}

int8_t setLocalData_double(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
   abortCode = SDOAbortCode_OK;
   node.od().f64Table[node.od().dataIndexTable[id]] = data.f64;
   return 0;
}

int8_t getLocalData_char(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    return -1; //TODO: implement
}

int8_t setLocalData_char(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    return -1; //TODO: implement
}

int8_t getRemoteData(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    node.hardware().getRemoteData(data, id, abortCode);
}

int8_t setRemoteData(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    node.hardware().setRemoteData(data, id, abortCode);
}

int32_t ObjectDictionnary::findObject(uint16_t index) {
    int32_t lower = 0;
    int32_t upper = length - 1;
    while (lower <= upper) {
        int32_t mid = lower + (upper - lower) / 2;
        if (objectIndexTable[mid].first == index && objectIndexTable[mid].second == 0)
            return mid;
        else if (objectIndexTable[mid].first < index)
            lower = mid + 1;
        else
            upper = mid - 1;
    }
    return -1;
}

int32_t ObjectDictionnary::findObject(uint16_t index, uint8_t subindex) {
    int32_t indexPos = findObject(index);
    if (indexPos == -1) return -1;
    int32_t id = indexPos + subindex;
    if (objectIndexTable[id].first == index &&
        objectIndexTable[id].second == subindex)
        return id;
    return -2;
}

int8_t ObjectDictionnary::readData(Data &data, uint16_t index, uint8_t subindex,
                                   SDOAbortCodes &abortCode) {
    int32_t id = findObject(index, subindex);
    if (id == -1) {
        abortCode = SDOAbortCodes::SDOAbortCode_ObjectNonExistent;
        return -1;
    }
    abortCode = SDOAbortCode_OK;
    return readData(data, id, abortCode);
}

int8_t ObjectDictionnary::writeData(const Data &data, uint16_t index, uint8_t subindex,
                                    SDOAbortCodes &abortCode) {
    int32_t id = findObject(index, subindex);
    if (id == -1) {
        abortCode = SDOAbortCodes::SDOAbortCode_ObjectNonExistent;
        return -1;
    }
    abortCode = SDOAbortCode_OK;
    return writeData(data, id, abortCode);
}

int8_t ObjectDictionnary::readData(Data &data, int32_t id,
                                   SDOAbortCodes &abortCode) {
    return objectGetterTable[id](data, id, abortCode);
}

int8_t ObjectDictionnary::writeData(const Data &data, int32_t id,
                                    SDOAbortCodes &abortCode) {
    return objectSetterTable[id](data, id, abortCode);
}

int8_t ObjectDictionnary::readData(Data &data, uint16_t index,
                                   uint8_t subindex) {
    int32_t id = findObject(index, subindex);
    if (id == -1) {
        return -1;
    }
    return readData(data, id);
}

int8_t ObjectDictionnary::writeData(const Data &data, uint16_t index,
                                    uint8_t subindex) {
    int32_t id = findObject(index, subindex);
    if (id == -1) {
        return -1;
    }
    return writeData(data, id);
}

int8_t ObjectDictionnary::readData(Data &data, int32_t id) {
    SDOAbortCodes abortCode;
    return objectGetterTable[id](data, id, abortCode);
}

int8_t ObjectDictionnary::writeData(const Data &data, int32_t id) {
    SDOAbortCodes abortCode;
    return objectSetterTable[id](data, id, abortCode);
}

bool ObjectDictionnary::saveData(uint8_t parameterGroup) {
    if (parameterGroup == 1){
        bool result = true;
        result &= node.hardware().saveDataToFlash(ParameterGroup_Communication);
        result &= node.hardware().saveDataToFlash(ParameterGroup_Application); //TODO: meta generate
        result &= node.hardware().saveDataToFlash(ParameterGroup_ManufacturerA); 
        return result;
    }
    return node.hardware().saveDataToFlash(parameterGroup);
}

int8_t ObjectDictionnary::saveData(const Data &data, int32_t id, SDOAbortCodes &abortCode) {
    if (data.u32 != SAVE_SIGNATURE){
        abortCode = SDOAbortCode_CannotStoreOrTransfer;
        return 0;
    }
    int32_t odID = findObject(SAVE_INDEX);
    if (id == -1) {
        abortCode = SDOAbortCode_ObjectNonExistent;
        return -1;
    }
    if ((id - odID) > MAX_SUB_INDEX) {
        abortCode = SDOAbortCode_SubindexNonExistent;
        return -1;
    }
    if (saveData(id - odID)) {
        return 0;
    }else{
        abortCode = SDOAbortCode_AccessFailedHardwareError;
        return -1;
    }
}

int8_t ObjectDictionnary::getSave(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    data.u32 = 0x01; //bit 1: auto save, bit 0: save at command
    int32_t odID = findObject(SAVE_INDEX);
    if (id == -1) {
        abortCode = SDOAbortCode_ObjectNonExistent;
        return -1;
    }
    if ((id - odID) > MAX_SUB_INDEX) {
        abortCode = SDOAbortCode_SubindexNonExistent;
        return -1;
    }
    return 0;
}

bool ObjectDictionnary::loadData(uint8_t parameterGroup) {
    if (parameterGroup == 1){
        bool result = true;
        result &= node.hardware().loadDataFromFlash(ParameterGroup_Communication);
        result &= node.hardware().loadDataFromFlash(ParameterGroup_Application); //TODO: meta generate
        result &= node.hardware().loadDataFromFlash(ParameterGroup_ManufacturerA);
        return result;
    }
    return node.hardware().loadDataFromFlash(parameterGroup);
}


bool ObjectDictionnary::restoreData(uint8_t parameterGroup) {
    Data tmp;
    int16_t size;
    uint16_t minIndex = 0x0000;
    uint16_t maxIndex = 0xFFFF;
    SDOAbortCodes abortCode;
    int count = 0;

    if (parameterGroup == ParameterGroup_Communication) { //TODO: meta generate
        minIndex = 0x1000; 
        maxIndex = 0x1FFF;
    } else if (parameterGroup == ParameterGroup_Application) {
        minIndex = 0x6000;
        maxIndex = 0x9FFF;
    } else if (parameterGroup == ParameterGroup_ManufacturerA) {
        minIndex = 0x2000;
        maxIndex = 0x5FFF;
    }
    for (int i = 0; i < length; i++) {
        if (objectIndexTable[i].first >= minIndex &&
            objectIndexTable[i].first <= maxIndex) {
            size = getSize(i);
            tmp = getMetadata(i)->getDefaultValue();
            int8_t ret;
            count = 0;
            while (writeData(tmp, i, abortCode) == 1) {
                count++;
                if (count > MAX_WRITE_TRY) {
                    break;
                }
            }
            DEVICE_DELAY_US(100);  // FIXME: understand why this is needed
        }
    }
    return true;
}

int8_t ObjectDictionnary::restoreData(const Data &data, int32_t id,
                                      SDOAbortCodes &abortCode) {
    if (data.u32 != RESTORE_SIGNATURE){
        abortCode = SDOAbortCode_CannotStoreOrTransfer;
        return 0;
    }
    int32_t odID = findObject(RESTORE_INDEX);
    if (id == -1) {
        abortCode = SDOAbortCode_ObjectNonExistent;
        return -1;
    }
    if ((id - odID) > MAX_SUB_INDEX) {
        abortCode = SDOAbortCode_SubindexNonExistent;
        return -1;
    }
    if (restoreData(id - odID)) {
        return 0;
    }else{
        abortCode = SDOAbortCode_AccessFailedHardwareError;
        return -1;
    }
}

int8_t ObjectDictionnary::getRestore(Data &data, int32_t id, SDOAbortCodes &abortCode) {
    data.u32 = 0x01; //bit 0: restore at command
    int32_t odID = findObject(SAVE_INDEX);
    if (id == -1) {
        abortCode = SDOAbortCode_ObjectNonExistent;
        return -1;
    }
    if ((id - odID) > MAX_SUB_INDEX) {
        abortCode = SDOAbortCode_SubindexNonExistent;
        return -1;
    }
    return 0;
}

bool ObjectDictionnary::isSubValid(uint16_t index, uint8_t subindex) {
    return findObject(index, subindex) != -1;
}

struct Metadata* ObjectDictionnary::getMetadata(uint16_t index,
                                               uint8_t subindex) {
    int32_t id = findObject(index, subindex);
    if (id < 0) {
        Metadata metadata;
        return &metadata;
    }
    return (Metadata*)objectMetadataTable[id];
}

struct Metadata* ObjectDictionnary::getMetadata(int32_t id) {
    return (Metadata*)objectMetadataTable[id];
}

Data *ObjectDictionnary::getData(uint16_t index, uint8_t subindex) {
    int32_t id = findObject(index, subindex);
    if (id == -1) {
        return nullptr;
    }
    return getData((uint32_t)id);
}

Data *ObjectDictionnary::getData(int32_t id) {
    Data data;
    SDOAbortCodes abortCode;
    objectGetterTable[id](data, id, abortCode);
    return &data;
}

void ObjectDictionnary::setData(const Data &data, uint16_t index,
                                uint8_t subindex) {
    int32_t id = findObject(index, subindex);
    if (id == -1) {
        return;
    }
    setData(data, (uint32_t)id);
}

void ObjectDictionnary::setData(const Data &data, int32_t id) {
    SDOAbortCodes abortCode;
    objectSetterTable[id](data, id, abortCode);
}

uint16_t ObjectDictionnary::getSize(uint16_t index, uint8_t subindex) {
    int32_t id = findObject(index, subindex);
    if (id == -1) {
        return -1;
    }
    return getSize((uint32_t)id);
}

uint16_t ObjectDictionnary::getSize(int32_t id) {
    switch (objectMetadataTable[id]->dataType) {
        case DataType::BOOL:
            return sizeof(bool);
        case DataType::INTEGER8:
            return sizeof(int8_t);
        case DataType::INTEGER16:
            return sizeof(int16_t);
        case DataType::INTEGER32:
            return sizeof(int32_t);
        case DataType::INTEGER64:
            return sizeof(int64_t);
        case DataType::UNSIGNED8:
            return sizeof(uint8_t);
        case DataType::UNSIGNED16:
            return sizeof(uint16_t);
        case DataType::UNSIGNED32:
            return sizeof(uint32_t);
        case DataType::UNSIGNED64:
            return sizeof(uint64_t);
        case DataType::REAL32:
            return sizeof(float);
        case DataType::REAL64:
            return sizeof(double);
        case DataType::VISIBLE_STRING:
            return sizeof(char);  // TODO: read string length
        default:
            return 0;
    }
}
